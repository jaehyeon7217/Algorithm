// 문제 : 트리 순회
// https://www.acmicpc.net/problem/1991
// 메모리 : 11,600Kb, 시간 76ms, 코드길이 1600B
// 처음에 전위연산을 스택으로 풀고 중위 후위 연산을 재귀호출로 구성했는데 하다보니 그냥 전중후 찍는 위치만 다르고 똑같은 코드라는것을 발견했다...

import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class Main {
	
	public static int n;
	public static int node[][];
	public static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws Exception { 
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
		StringTokenizer st ; 
		
		n = Integer.parseInt(br.readLine());
		
		node = new int[n][2];
	
		for(int i=0;i<n;i++) {
			node[i][0]=-1;
			node[i][1]=-1;
		}
		
		for(int i=0;i<n;i ++) {
			st = new StringTokenizer(br.readLine(), " ");
			int no = st.nextToken().toCharArray()[0]-'A'; 
			
			for(int j=0;j<2;j++) {
			char temp = st.nextToken().charAt(0);
			if(temp != '.')
				node[no][j] = temp-'A';
			}
		}
		
		// 전위 순회 (스택이용)
//Stack<Integer> stack = new Stack<>();
//stack.add(0);
//while(!stack.isEmpty()) {
//	int temp = stack.pop();
//	sb.append(Character.toChars(temp+'A'));
//	if(node[temp][1] != -1) 
//		stack.push(node[temp][1]);
//	if(node[temp][0] != -1) 
//		stack.push(node[temp][0]);
//}
//sb.append("\n");
    
    // 전위 순회 (재귀 호출 이용)
		func1(0);
		sb.append("\n");
		
		// 중위 순회
		func2(0);
		sb.append("\n");
		
		// 후위 순회
		func3(0);
		sb.append("\n");
		
		System.out.println(sb.toString());
	}
	
	public static void func1(int depth) {
		sb.append(Character.toChars(depth+'A')); // 찍는 위치에 따라 전, 중, 후위 순회
		if(node[depth][0] != -1) {
			func1(node[depth][0]);
		}
		if(node[depth][1] != -1) {
			func1(node[depth][1]);
		}
		return;
	}
	
	public static void func2(int depth) {
		if(node[depth][0] != -1) {
			func2(node[depth][0]);
		}
		sb.append(Character.toChars(depth+'A'));
		if(node[depth][1] != -1) {
			func2(node[depth][1]);
		}
		return;
	}
	
	public static void func3(int depth) {
		if(node[depth][0] != -1) {
			func3(node[depth][0]);
		}
		if(node[depth][1] != -1) {
			func3(node[depth][1]);
		}
		sb.append(Character.toChars(depth+'A'));
		return;
	}
	
}
