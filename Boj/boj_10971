// 문제 : 외판원 순회 2, 실버 2
// https://www.acmicpc.net/problem/10971
// 처음에 시간이 많이 나오길래 뭐가 문제인가 했는데
// 문제에서 0부터 시작한다는 말이 없어서 모든 지점에서 확인 후 최소값을 구했습니다.
// 그러니 시간이 264~292ms 정도 였으나 다른 사람들의 코드를 참조해 보니 무조건 0부터 시작하게 코드를 짜도 문제가 없었습니다.
// 그래서 0부터 하니 시간이 108ms까지 줄었습니다.
// 메모리 : 12,200KB, 시간 : 108ms, 코드길이 1,039B

import java.io.*;
import java.util.*;

public class Main {
	
	public static int n, result = Integer.MAX_VALUE;
	public static int[][] map;
	public static boolean[] check;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
	
		n = Integer.parseInt(br.readLine());
		
		map = new int[n][n];
		check= new boolean[n];
		
		for(int i=0;i<n;i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j=0;j<n;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
			check[0] = true;
			dfs(0,0,0,0);
  
//    이 부분이 모든 점에서 시작해서 비교하는 방법
//    for(int i=0;i<n;i++) {
//			check[i] = true;
//			dfs(0,i,i,0);
//			check[i] = false;
//		}
      
		
		System.out.println(result);
	}
	
	public static void dfs(int num, int start, int now, int sum) {
		if(num==n-1) {
			if(map[now][start] == 0) return;
			result = Math.min(result,  sum + map[now][start]);
			return;
		}
		
		for(int i=0;i<n;i++) {
			if(check[i]) continue;
			if(map[now][i] == 0) continue;
			
			check[i] = true;
			dfs(num+1, start, i, sum+map[now][i]);
			check[i] = false;
		}
		
	}
	
}
